<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>25 - Realistic render</title>
</head>
<body>
<canvas class="webgl"></canvas>
</body>
</html>
<style>
    *
    {
        margin: 0;
        padding: 0;
    }

    html,
    body
    {
        overflow: hidden;
    }

    .webgl
    {
        position: fixed;
        top: 0;
        left: 0;
        outline: none;
    }
</style>
<script>
    import * as THREE from 'three'
    import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js'
    import * as dat from 'lil-gui'
    import { GLTFLoader} from "three/examples/jsm/loaders/GLTFLoader.js";

    /**
     * Loaders
     */
    const gltfLoader = new GLTFLoader()
    const cubeTextureLoader = new THREE.CubeTextureLoader()

    /**
     * Base
     */
// Debug
    const gui = new dat.GUI()
    const debugObject = {}

    // Canvas
    const canvas = document.querySelector('canvas.webgl')

    // Scene
    const scene = new THREE.Scene()
    scene.backgroundBlurriness = 0.02

    /**
     * Update all materials
     */

    const updateAllMaterials = () =>
     {
        scene.traverse((child)=>{
            if(child instanceof THREE.Mesh && child.material instanceof THREE.MeshStandardMaterial){
                child.material.envMap = environmentMap
                child.material.envMapIntensity = debugObject.envMapIntensity
                child.material.needsUpdate = true
                child.castShadow = true
                child.receiveShadow = true
            }
        })
     }

    /**
     * Environment map
     */
    const environmentMap = cubeTextureLoader.load([
        '/environmentMaps/0/px.jpg',
        '/environmentMaps/0/nx.jpg',
        '/environmentMaps/0/py.jpg',
        '/environmentMaps/0/ny.jpg',
        '/environmentMaps/0/pz.jpg',
        '/environmentMaps/0/nz.jpg'
    ])
    environmentMap.outputColorSpace = THREE.SRGBColorSpace
    scene.background = environmentMap
    // scene.environment = environmentMap // easier but cant control intensity

    debugObject.envMapIntensity = 1
    gui.add(debugObject, 'envMapIntensity').min(0).max(10).step(0.001).onChange(updateAllMaterials)

    /**
     * Models
     */

    gltfLoader.load(
        "/models/FlightHelmet/glTF/FlightHelmet.gltf",
        (gltf) =>
        {
            gltf.scene.scale.set(10, 10, 10)
            gltf.scene.position.set(0, - 4, 0)
            gltf.scene.rotation.y = Math.PI * 0.5
            scene.add(gltf.scene)

            gui
                .add(gltf.scene.rotation, 'y')
                .min(- Math.PI).max(Math.PI)
                .step(0.001)
                .name('rotation')

            updateAllMaterials()
        }
        // "/models/Burger/burger.glb",
        // (gltf) =>{
        //     gltf.scene.scale.set(0.1, 0.1, 0.1)
        //     gltf.scene.rotation.y = Math.PI * 0.5
        //     scene.add(gltf.scene)
        //
        //     gui
        //         .add(gltf.scene.rotation, 'y')
        //         .min(- Math.PI).max(Math.PI)
        //         .step(0.001)
        //         .name('rotation')
        //
        //     updateAllMaterials()
        // }
    )

    /**
     * Lights
     */
    const directionalLight = new THREE.DirectionalLight('#ffffff', 1)
    directionalLight.position.set(0.25, 3, - 2.25)
    directionalLight.castShadow = true
    // const directionalLightCameraHelper = new THREE.CameraHelper(directionalLight.shadow.camera)
    // scene.add(directionalLightCameraHelper)
    directionalLight.shadow.camera.far = 15
    directionalLight.shadow.mapSize.set(1024,1024)
    directionalLight.shadow.normalBias = 0.05
    scene.add(directionalLight)

    // const directionalLightCameraHelper = new THREE.CameraHelper(directionalLight.shadow.camera)

    gui.add(directionalLight, 'intensity').min(0).max(10).step(0.001).name('lightIntensity')
    gui.add(directionalLight.position, 'x').min(- 5).max(5).step(0.001).name('lightX')
    gui.add(directionalLight.position, 'y').min(- 5).max(5).step(0.001).name('lightY')
    gui.add(directionalLight.position, 'z').min(- 5).max(5).step(0.001).name('lightZ')

    /**
     * Sizes
     */
    const sizes = {
        width: window.innerWidth,
        height: window.innerHeight
    }

    window.addEventListener('resize', () =>
    {
        // Update sizes
        sizes.width = window.innerWidth
        sizes.height = window.innerHeight

        // Update camera
        camera.aspect = sizes.width / sizes.height
        camera.updateProjectionMatrix()

        // Update renderer
        renderer.setSize(sizes.width, sizes.height)
        renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))
    })

    /**
     * Camera
     */
// Base camera
    const camera = new THREE.PerspectiveCamera(75, sizes.width / sizes.height, 0.1, 100)
    camera.position.set(4, 1, - 4)
    scene.add(camera)

    // Controls
    const controls = new OrbitControls(camera, canvas)
    controls.enableDamping = true

    /**
     * Renderer
     */
    const renderer = new THREE.WebGLRenderer({
        canvas: canvas,
        antialias: true
    })
    renderer.setSize(sizes.width, sizes.height)
    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))
    renderer.outputColorSpace = THREE.SRGBColorSpace
    renderer.toneMapping = THREE.ReinhardToneMapping
    renderer.toneMappingExposure = 3
    renderer.shadowMap.enabled = true
    renderer.shadowMap.type = THREE.PCFSoftShadowMap

    gui.add( scene, 'backgroundBlurriness', 0, 1 )

        .onChange( function ( value ) {

            scene.backgroundBlurriness = value;

        } );

    gui.add(renderer, 'toneMapping', {
        No: THREE.NoToneMapping,
        Linear: THREE.LinearToneMapping,
        Reinhard: THREE.ReinhardToneMapping,
        Cineon: THREE.CineonToneMapping,
        ACESFilmic: THREE.ACESFilmicToneMapping,
    })

    gui.add(renderer, 'toneMappingExposure').min(0).max(10).step(0.001)

    /**
     * Animate
     */
    const tick = () =>
    {
        // Update controls
        controls.update()

        // Render
        renderer.render(scene, camera)

        // Call tick again on the next frame
        window.requestAnimationFrame(tick)
    }

    tick()
</script>