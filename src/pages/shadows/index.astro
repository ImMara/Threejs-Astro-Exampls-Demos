<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>16 - Shadows</title>
</head>
<body>
<canvas class="webgl"></canvas>
</body>
</html>
<style>
    *
    {
        margin: 0;
        padding: 0;
    }

    html,
    body
    {
        overflow: hidden;
    }

    .webgl
    {
        position: fixed;
        top: 0;
        left: 0;
        outline: none;
    }

</style>
<script>
    import * as THREE from 'three'
    import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js'
    import * as dat from 'lil-gui'

    /**
     * Base
     */
// Debug
    const gui = new dat.GUI()

    // Canvas
    const canvas = document.querySelector('canvas.webgl')

    // Scene
    const scene = new THREE.Scene()
    /**
     * Textures
     */
    const textureLoader = new THREE.TextureLoader()
    const bakedShadow = textureLoader.load('/textures/bakedShadow.jpg')
    const simpleShadow = textureLoader.load('/textures/simpleShadow.jpg')

    /**
     * Lights
     */
    // Ambient light
    const ambientLight = new THREE.AmbientLight(0xffffff, 0.3)
    gui.add(ambientLight, 'intensity')
        .min(0)
        .max(1)
        .step(0.001)
    scene.add(ambientLight)

    // Directional light
    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.3)
    directionalLight.position.set(2, 2, - 1)

    directionalLight.castShadow = false // enable shadow on light
    directionalLight.shadow.mapSize.width = 1024 // define resolution
    directionalLight.shadow.mapSize.height = 1024
    directionalLight.shadow.camera.near = 1 // control if it's far or close from object and expansion
    directionalLight.shadow.camera.far = 6

    directionalLight.shadow.camera.top = 2
    directionalLight.shadow.camera.right = 2
    directionalLight.shadow.camera.bottom = - 2
    directionalLight.shadow.camera.left = - 2

    // directionalLight.shadow.radius = 10 // control blur

    gui.add(directionalLight, 'intensity').min(0).max(1).step(0.001)
    gui.add(directionalLight.position, 'x').min(- 5).max(5).step(0.001)
    gui.add(directionalLight.position, 'y').min(- 5).max(5).step(0.001)
    gui.add(directionalLight.position, 'z').min(- 5).max(5).step(0.001)
    scene.add(directionalLight)

    const directionalLightCameraHelper = new THREE.CameraHelper(directionalLight.shadow.camera)
    directionalLightCameraHelper.visible = false
    gui.add(directionalLightCameraHelper, 'visible',).name('directional light helper')
    scene.add(directionalLightCameraHelper)

    // spot light
    const spotLight = new THREE.SpotLight(0xffffff, 0.4, 10, Math.PI * 0.3)

    spotLight.castShadow = false

    spotLight.position.set(0, 2, 2)
    spotLight.shadow.mapSize.width = 1024
    spotLight.shadow.mapSize.height = 1024
    spotLight.shadow.camera.fov = 50
    spotLight.shadow.camera.near = 1
    spotLight.shadow.camera.far = 6

    scene.add(spotLight)
    scene.add(spotLight.target)

    const spotLightCameraHelper = new THREE.CameraHelper(spotLight.shadow.camera)
    spotLightCameraHelper.visible = false
    gui.add(spotLightCameraHelper, 'visible').name('spot light helper');
    scene.add(spotLightCameraHelper)


    // Point light
    const pointLight = new THREE.PointLight(0xffffff, 0.3)

    pointLight.castShadow = false

    pointLight.position.set(- 1, 1, 0)
    pointLight.shadow.mapSize.width = 1024
    pointLight.shadow.mapSize.height = 1024

    pointLight.shadow.camera.near = 0.1
    pointLight.shadow.camera.far = 5

    scene.add(pointLight)

    const pointLightCameraHelper = new THREE.CameraHelper(pointLight.shadow.camera)
    pointLightCameraHelper.visible = false
    gui.add(pointLightCameraHelper, 'visible').name('point light helper');
    scene.add(pointLightCameraHelper)

    /**
     * Materials
     */
    const material = new THREE.MeshStandardMaterial()
    material.roughness = 0.7
    gui.add(material, 'metalness').min(0).max(1).step(0.001)
    gui.add(material, 'roughness').min(0).max(1).step(0.001)

    /**
     * Objects
     */

    const sphere = new THREE.Mesh(
        new THREE.SphereGeometry(0.5, 32, 32),
        material
    )
    sphere.castShadow = true

    const plane = new THREE.Mesh(
        new THREE.PlaneGeometry(5, 5),
        material
    )
    plane.receiveShadow = true
    plane.rotation.x = - Math.PI * 0.5
    plane.position.y = - 0.5

    const sphereShadow = new THREE.Mesh(
        new THREE.PlaneGeometry(1.5, 1.5),
        new THREE.MeshBasicMaterial({
            color: 0x000000,
            transparent: true,
            alphaMap: simpleShadow
        })
    )
    sphereShadow.rotation.x = - Math.PI * 0.5
    sphereShadow.position.y = plane.position.y + 0.01

    scene.add(sphere,sphereShadow, plane)

    /**
     * Sizes
     */
    const sizes = {
        width: window.innerWidth,
        height: window.innerHeight
    }

    window.addEventListener('resize', () =>
    {
        // Update sizes
        sizes.width = window.innerWidth
        sizes.height = window.innerHeight

        // Update camera
        camera.aspect = sizes.width / sizes.height
        camera.updateProjectionMatrix()

        // Update renderer
        renderer.setSize(sizes.width, sizes.height)
        renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))
    })

    /**
     * Camera
     */
// Base camera
    const camera = new THREE.PerspectiveCamera(75, sizes.width / sizes.height, 0.1, 100)
    camera.position.x = 1
    camera.position.y = 1
    camera.position.z = 2
    scene.add(camera)

    // Controls
    const controls = new OrbitControls(camera, canvas)
    controls.enableDamping = true

    /**
     * Renderer
     */
    const renderer = new THREE.WebGLRenderer({
        canvas: canvas
    })
    renderer.setSize(sizes.width, sizes.height)
    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))
    renderer.shadowMap.enabled = false
    renderer.shadowMap.type = THREE.PCFSoftShadowMap // doesn't work with radius

    /**
     * Animate
     */
    const clock = new THREE.Clock()

    const tick = () =>
    {
        const elapsedTime = clock.getElapsedTime()

        // update sphere
        sphere.position.x = Math.cos(elapsedTime) * 1.5
        sphere.position.z = Math.sin(elapsedTime) * 1.5
        sphere.position.y = Math.abs(Math.sin(elapsedTime * 3))

        // update shadow
        sphereShadow.position.x = sphere.position.x
        sphereShadow.position.z = sphere.position.z
        sphereShadow.material.opacity = (1 - sphere.position.y) * 0.3

        // Update controls
        controls.update()

        // Render
        renderer.render(scene, camera)

        // Call tick again on the next frame
        window.requestAnimationFrame(tick)
    }

    tick()
</script>