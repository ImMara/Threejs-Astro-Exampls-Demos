---
---
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
</head>
<body>
    <canvas class="webgl"></canvas>
</body>
</html>
<script>
    import "../../scripts/three.min.js";

    // Canvas
    const canvas = document.querySelector('canvas.webgl') // selection du canvas

    // Sizes
    const sizes = {
        width: 800,
        height: 600
    }

    // Scene
    const scene = new THREE.Scene() // creation de la scene

    // Object
    const cubeGeometry = new THREE.BoxGeometry(1, 1, 1) // creation de la geometrie
    const cubeMaterial = new THREE.MeshBasicMaterial({
        color: '#ff0000'
    }) // creation du materiau
    const cubeMesh = new THREE.Mesh(cubeGeometry, cubeMaterial) // creation du mesh

    // cubeMesh.position.x = 0.7 // position du mesh
    // cubeMesh.position.y = -0.6 // position du mesh
    // cubeMesh.position.z = 1 // position du mesh

    // cubeMesh.scale.x = 2
    // cubeMesh.scale.y = 0.25
    // cubeMesh.scale.z = 0.5
    // cubeMesh.position.set(0.7, - 0.6, 1) // position du mesh

    cubeMesh.rotation.x = Math.PI * 0.25
    cubeMesh.rotation.y = Math.PI * 0.25

    // scene.add(cubeMesh) // ajout du mesh a la scene

    // console.log(cubeMesh.position.length()) // longueur du mesh
    // console.log(cubeMesh.position.distanceTo(camera.position)) // distance entre le mesh et la camera
    // console.log(cubeMesh.position.normalize()) // normalisation de la position du mesh

    /**
     * Axes Helper
     */
    const axesHelper = new THREE.AxesHelper(2)
    scene.add(axesHelper)

    /**
     * Objects
     */
    const group = new THREE.Group()
    group.scale.y = 2
    group.rotation.y = 0.2
    scene.add(group)

    const cube1 = new THREE.Mesh(
        new THREE.BoxGeometry(1, 1, 1),
        new THREE.MeshBasicMaterial({ color: 0xff0000 })
    )
    cube1.position.x = - 1.5
    group.add(cube1)

    const cube2 = new THREE.Mesh(
        new THREE.BoxGeometry(1, 1, 1),
        new THREE.MeshBasicMaterial({ color: 0xff0000 })
    )
    cube2.position.x = 0
    group.add(cube2)

    const cube3 = new THREE.Mesh(
        new THREE.BoxGeometry(1, 1, 1),
        new THREE.MeshBasicMaterial({ color: 0xff0000 })
    )
    cube3.position.x = 1.5
    group.add(cube3)

    // Camera
    const camera = new THREE.PerspectiveCamera(75, sizes.width / sizes.height) // creation de la camera
    camera.position.z = 3 // position de la camera
    scene.add(camera) // ajout de la camera a la scene
    // camera.lookAt(new THREE.Vector3(0, - 1, 0)) // orientation de la camera
    camera.lookAt(cubeMesh.position) // orientation de la camera vers le mesh

    // Renderer
    const renderer = new THREE.WebGLRenderer({
        canvas: canvas
    }) // creation du renderer
    renderer.setSize(sizes.width, sizes.height) // taille du renderer
    renderer.render(scene, camera) // rendu de la scene et de la camera

</script>