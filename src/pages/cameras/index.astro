<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
</head>
<body>
<canvas class="webgl"></canvas>
</body>
</html>
<style>
    *{
        margin: 0;
        padding: 0;
    }
    html,body{
        height: 100%;
    }
</style>
<script>
    import "../../scripts/three.min.js";
    import gsap from 'gsap';

    const canvas = document.querySelector('.webgl');

    const scene = new THREE.Scene();

    const geometry = new THREE.BoxGeometry(1,1,1);
    const material = new THREE.MeshBasicMaterial({color: 0xff0000});
    const mesh = new THREE.Mesh(geometry,material);
    scene.add(mesh);

    const sizes = {
        width: window.innerWidth,
        height: window.innerHeight
    }

    window.addEventListener('resize' , () => {
        sizes.width = window.innerWidth;
        sizes.height = window.innerHeight;

        camera.aspect = sizes.width/sizes.height;
        camera.updateProjectionMatrix();

        renderer.setSize(sizes.width,sizes.height)
    })

    window.addEventListener("dblclick",() =>
    {
        if(!document.fullscreenElement)
        {
            canvas.requestFullscreen();
        }
        else
        {
            document.exitFullscreen();
        }
    })

    const camera = new THREE.PerspectiveCamera(45,sizes.width/sizes.height,0.1,100);
    const aspectRatio = sizes.width/sizes.height;
    // const camera = new THREE.OrthographicCamera(-1*aspectRatio,1*aspectRatio,1,-1,0.1,100);
    camera.position.x = 2;
    camera.position.y = 2;
    camera.position.z = 2;
    // console.log(camera.position.length())
    camera.lookAt(mesh.position);

    scene.add(camera);

    const renderer = new THREE.WebGLRenderer({
        canvas: canvas
    });
    renderer.setSize(sizes.width,sizes.height);
    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));

    // Clock
    const clock = new THREE.Clock();

    // gsap.to(mesh.position,{duration: 1, delay: 1, x: 2})
    // gsap.to(mesh.position,{duration: 1, delay: 2, x: 0})

    // Animations
    const tick = () =>{

        // Clock
        // permet de calculer le temps entre chaque frame
        // et de l'utiliser pour les animations
        // 1 frame = 1/60s
        const elapsedTime = clock.getElapsedTime();

        // Update Object
        // mesh.rotation.x = elapsedTime;
        // mesh.rotation.y = elapsedTime;

        // camera.position.y = Math.sin(elapsedTime);
        // camera.position.x = Math.cos(elapsedTime);

        // camera.lookAt(mesh.position);

        // Update camera
        // camera.position.x = Math.sin(cursor.x * Math.PI * 2) * 3;
        // camera.position.z= Math.cos(cursor.x * Math.PI * 2) * 3;
        // camera.position.y = cursor.y * 5;
        //
        // camera.lookAt(mesh.position);

        // Render
        renderer.render(scene,camera);

        window.requestAnimationFrame(tick)
    }

    tick();

</script>