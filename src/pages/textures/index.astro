<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>09 - Geometries</title>
</head>
<body>
<canvas class="webgl"></canvas>
<script>
    import * as THREE from 'three'
    import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js'
    import imageSource from '/textures/door/color.jpg'

    // creating texture

    // const textureLoader = new THREE.TextureLoader()
    // const texture = textureLoader.load(imageSource,
    //     () => {
    //         // console.log('loading')
    //     },
    //     () => {
    //         // console.log('loaded')
    //     },
    //     () => {
    //         // console.log('error')
    //     }
    // ) // for single textures

    const loadingManager = new THREE.LoadingManager()
    const textureLoader = new THREE.TextureLoader(loadingManager)
    const colorTexture = textureLoader.load('/textures/door/color.jpg')
    const alphaTexture = textureLoader.load('/textures/door/alpha.jpg')
    const heightTexture = textureLoader.load('/textures/door/height.jpg')
    const normalTexture = textureLoader.load('/textures/door/normal.jpg')
    const ambientOcclusionTexture = textureLoader.load('/textures/door/ambientOcclusion.jpg')
    const metalnessTexture = textureLoader.load('/textures/door/metalness.jpg')
    const roughnessTexture = textureLoader.load('/textures/door/roughness.jpg')

    colorTexture.repeat.x = 2
    colorTexture.repeat.y = 3

    // colorTexture.wrapS = THREE.RepeatWrapping
    // colorTexture.wrapT = THREE.RepeatWrapping

    colorTexture.wrapS = THREE.MirroredRepeatWrapping
    colorTexture.wrapT = THREE.MirroredRepeatWrapping

    colorTexture.offset.x = 0.5
    colorTexture.offset.y = 0.5

    colorTexture.rotation = Math.PI * 0.25
    colorTexture.center.x = 0.5
    colorTexture.center.y = 0.5

    colorTexture.minFilter = THREE.NearestFilter

    /**
     * Base
     */
// Canvas
    const canvas = document.querySelector('canvas.webgl')

    // Scene
    const scene = new THREE.Scene()

    // Object
    const geometry = new THREE.BoxGeometry(1, 1, 1)
    const material = new THREE.MeshBasicMaterial({ map: colorTexture })
    const mesh = new THREE.Mesh(geometry, material)
    scene.add(mesh)

    // Sizes
    const sizes = {
        width: window.innerWidth,
        height: window.innerHeight
    }

    window.addEventListener('resize', () =>
    {
        // Update sizes
        sizes.width = window.innerWidth
        sizes.height = window.innerHeight

        // Update camera
        camera.aspect = sizes.width / sizes.height
        camera.updateProjectionMatrix()

        // Update renderer
        renderer.setSize(sizes.width, sizes.height)
        renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))
    })

    // Camera
    const camera = new THREE.PerspectiveCamera(75, sizes.width / sizes.height, 0.1, 100)
    camera.position.z = 3
    scene.add(camera)

    // Controls
    const controls = new OrbitControls(camera, canvas)
    controls.enableDamping = true

    // Renderer
    const renderer = new THREE.WebGLRenderer({
        canvas: canvas
    })
    renderer.setSize(sizes.width, sizes.height)
    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))

    // Animate
    const clock = new THREE.Clock()

    const tick = () =>
    {
        const elapsedTime = clock.getElapsedTime()

        // Update controls
        controls.update()

        // Render
        renderer.render(scene, camera)

        // Call tick again on the next frame
        window.requestAnimationFrame(tick)
    }

    tick()
</script>
</body>
</html>
<style>
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    body {
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen,
        Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
        background-color: #000;
        overflow: hidden;
    }

    canvas.webgl {
        width: 100vw;
        height: 100vh;
    }
</style>